/* Core */
import { createSlice, type PayloadAction } from '@reduxjs/toolkit'

/* Instruments */
import { fetchPlayersAsync } from './thunks'
import { Player } from '@/types/Player'

const initialState: PlayerSliceState = {
  players: [],
  players_loaded: 0,
  glk_count: 0,
  def_count: 0,
  mid_count: 0,
  fwd_count: 0,
  status: 'idle',
}

export const playerSlice = createSlice({
  name: 'player',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // increment: (state) => {
    //   // Redux Toolkit allows us to write "mutating" logic in reducers. It
    //   // doesn't actually mutate the state because it uses the Immer library,
    //   // which detects changes to a "draft state" and produces a brand new
    //   // immutable state based off those changes
    //   state.value += 1
    // },
    // decrement: (state) => {
    //   state.value -= 1
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchPlayersAsync.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(fetchPlayersAsync.fulfilled, (state, action) => {
        state.status = 'idle'
        state.players = action.payload
      })
  },
})

/* Types */
export interface PlayerSliceState {
  players: Player[],
  players_loaded: number,
  glk_count: number,
  def_count: number,
  mid_count: number,
  fwd_count: number,
  status: 'idle' | 'loading' | 'failed'
}
